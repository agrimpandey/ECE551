/////////////////////////////////////////////////////////////
// Created by: Synopsys DC Expert(TM) in wire load mode
// Version   : M-2016.12
// Date      : Tue Nov 21 23:11:52 2017
/////////////////////////////////////////////////////////////


module SPI_mstr16 ( clk, rst_n, cmd, wrt, MISO, MOSI, SS_n, SCLK, done, 
        rd_data );
  input [15:0] cmd;
  output [15:0] rd_data;
  input clk, rst_n, wrt, MISO;
  output MOSI, SS_n, SCLK, done;
  wire   n105, n106, n107, n108, n109, n110, n111, n112, n113, n114, n115,
         n116, n117, n118, n119, n120, n121, n122, n123, N16, N17, N18, N19,
         N20, N32, N33, N34, N35, N36, N37, N38, N39, N40, MISO_smpl, n12, n13,
         n14, n15, n16, n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27,
         n28, n29, n30, n31, n32, n33, n34, n35, n36, n37, n38, n39, n40, n41,
         n42, n43, n44, n45, n46, n47, n48, n49, n50, n52, n54, n56, n58, n60,
         n62, n64, n66, n68, n70, n72, n74, n76, n78, n80, n86, n87, n88, n89,
         n90, n91, n92, n93, n94, n95, n96, n97, n98, n99, n100, n101, n102,
         n103, n104;
  wire   [3:0] sclk_div;
  wire   [4:0] bit_cnt;
  wire   [1:0] curr_state;
  wire   [1:0] next_state;
  wire   [4:2] \add_64/carry ;
  wire   [4:2] \add_52/carry ;

  DFCNQD1BWP \curr_state_reg[0]  ( .D(next_state[0]), .CP(clk), .CDN(n89), .Q(
        curr_state[0]) );
  DFCNQD1BWP \sclk_div_reg[0]  ( .D(N36), .CP(clk), .CDN(n89), .Q(sclk_div[0])
         );
  DFCNQD1BWP \sclk_div_reg[1]  ( .D(N37), .CP(clk), .CDN(n89), .Q(sclk_div[1])
         );
  DFCNQD1BWP \sclk_div_reg[2]  ( .D(N38), .CP(clk), .CDN(n89), .Q(sclk_div[2])
         );
  DFCNQD1BWP \sclk_div_reg[3]  ( .D(N39), .CP(clk), .CDN(n89), .Q(sclk_div[3])
         );
  DFCNQD1BWP \sclk_div_reg[4]  ( .D(N40), .CP(clk), .CDN(n89), .Q(n106) );
  DFCNQD1BWP \curr_state_reg[1]  ( .D(next_state[1]), .CP(clk), .CDN(n89), .Q(
        curr_state[1]) );
  DFCNQD1BWP \bit_cnt_reg[1]  ( .D(n49), .CP(clk), .CDN(n89), .Q(bit_cnt[1])
         );
  DFCNQD1BWP \bit_cnt_reg[0]  ( .D(n48), .CP(clk), .CDN(n89), .Q(bit_cnt[0])
         );
  DFCNQD1BWP \bit_cnt_reg[2]  ( .D(n47), .CP(clk), .CDN(n89), .Q(bit_cnt[2])
         );
  DFCNQD1BWP \bit_cnt_reg[3]  ( .D(n46), .CP(clk), .CDN(n90), .Q(bit_cnt[3])
         );
  DFCNQD1BWP \bit_cnt_reg[4]  ( .D(n45), .CP(clk), .CDN(n90), .Q(bit_cnt[4])
         );
  DFCNQD1BWP \shft_reg_reg[0]  ( .D(n44), .CP(clk), .CDN(n90), .Q(n123) );
  DFCNQD1BWP \shft_reg_reg[1]  ( .D(n43), .CP(clk), .CDN(n90), .Q(n122) );
  DFCNQD1BWP \shft_reg_reg[2]  ( .D(n42), .CP(clk), .CDN(n90), .Q(n121) );
  DFCNQD1BWP \shft_reg_reg[3]  ( .D(n41), .CP(clk), .CDN(n90), .Q(n120) );
  DFCNQD1BWP \shft_reg_reg[4]  ( .D(n40), .CP(clk), .CDN(n90), .Q(n119) );
  DFCNQD1BWP \shft_reg_reg[5]  ( .D(n39), .CP(clk), .CDN(n90), .Q(n118) );
  DFCNQD1BWP \shft_reg_reg[6]  ( .D(n38), .CP(clk), .CDN(n90), .Q(n117) );
  DFCNQD1BWP \shft_reg_reg[7]  ( .D(n37), .CP(clk), .CDN(n90), .Q(n116) );
  DFCNQD1BWP \shft_reg_reg[8]  ( .D(n36), .CP(clk), .CDN(n91), .Q(n115) );
  DFCNQD1BWP \shft_reg_reg[9]  ( .D(n35), .CP(clk), .CDN(n91), .Q(n114) );
  DFCNQD1BWP \shft_reg_reg[10]  ( .D(n34), .CP(clk), .CDN(n91), .Q(n113) );
  DFCNQD1BWP \shft_reg_reg[11]  ( .D(n33), .CP(clk), .CDN(n91), .Q(n112) );
  DFCNQD1BWP \shft_reg_reg[12]  ( .D(n32), .CP(clk), .CDN(n91), .Q(n111) );
  DFCNQD1BWP \shft_reg_reg[13]  ( .D(n31), .CP(clk), .CDN(n91), .Q(n110) );
  DFCNQD1BWP \shft_reg_reg[14]  ( .D(n30), .CP(clk), .CDN(n91), .Q(n109) );
  DFCNQD1BWP done_reg ( .D(n28), .CP(clk), .CDN(n91), .Q(n107) );
  OAI21D4BWP U35 ( .A1(n25), .A2(n14), .B(n19), .ZN(n24) );
  EDFQD1BWP MISO_smpl_reg ( .D(MISO), .E(n22), .CP(clk), .Q(MISO_smpl) );
  DFSNQD1BWP SS_n_reg ( .D(n27), .CP(clk), .SDN(n91), .Q(n105) );
  DFCNQD1BWP \shft_reg_reg[15]  ( .D(n29), .CP(clk), .CDN(n91), .Q(n108) );
  ND2D1BWP U59 ( .A1(SCLK), .A2(n18), .ZN(n25) );
  IND2D1BWP U60 ( .A1(n13), .B1(n99), .ZN(n19) );
  CKBD4BWP U61 ( .I(n20), .Z(n87) );
  INVD1BWP U62 ( .I(curr_state[0]), .ZN(n98) );
  ND2D1BWP U63 ( .A1(curr_state[1]), .A2(n98), .ZN(n14) );
  INVD1BWP U64 ( .I(n25), .ZN(n99) );
  CKND2BWP U65 ( .I(n108), .ZN(n50) );
  CKND16BWP U66 ( .I(n50), .ZN(MOSI) );
  CKND2BWP U67 ( .I(n109), .ZN(n52) );
  CKND16BWP U68 ( .I(n52), .ZN(rd_data[14]) );
  CKND2BWP U69 ( .I(n110), .ZN(n54) );
  CKND16BWP U70 ( .I(n54), .ZN(rd_data[13]) );
  CKND2BWP U71 ( .I(n111), .ZN(n56) );
  CKND16BWP U72 ( .I(n56), .ZN(rd_data[12]) );
  CKND2BWP U73 ( .I(n112), .ZN(n58) );
  CKND16BWP U74 ( .I(n58), .ZN(rd_data[11]) );
  CKND2BWP U75 ( .I(n113), .ZN(n60) );
  CKND16BWP U76 ( .I(n60), .ZN(rd_data[10]) );
  CKND2BWP U77 ( .I(n114), .ZN(n62) );
  CKND16BWP U78 ( .I(n62), .ZN(rd_data[9]) );
  CKND2BWP U79 ( .I(n115), .ZN(n64) );
  CKND16BWP U80 ( .I(n64), .ZN(rd_data[8]) );
  CKND2BWP U81 ( .I(n116), .ZN(n66) );
  CKND16BWP U82 ( .I(n66), .ZN(rd_data[7]) );
  CKND2BWP U83 ( .I(n117), .ZN(n68) );
  CKND16BWP U84 ( .I(n68), .ZN(rd_data[6]) );
  CKND2BWP U85 ( .I(n118), .ZN(n70) );
  CKND16BWP U86 ( .I(n70), .ZN(rd_data[5]) );
  CKND2BWP U87 ( .I(n119), .ZN(n72) );
  CKND16BWP U88 ( .I(n72), .ZN(rd_data[4]) );
  CKND2BWP U89 ( .I(n120), .ZN(n74) );
  CKND16BWP U90 ( .I(n74), .ZN(rd_data[3]) );
  CKND2BWP U91 ( .I(n121), .ZN(n76) );
  CKND16BWP U92 ( .I(n76), .ZN(rd_data[2]) );
  CKND2BWP U93 ( .I(n122), .ZN(n78) );
  CKND16BWP U94 ( .I(n78), .ZN(rd_data[1]) );
  CKND2BWP U95 ( .I(n123), .ZN(n80) );
  CKND16BWP U96 ( .I(n80), .ZN(rd_data[0]) );
  CKBD16BWP U97 ( .I(n105), .Z(SS_n) );
  CKBD16BWP U98 ( .I(n107), .Z(done) );
  CKBD16BWP U99 ( .I(n106), .Z(SCLK) );
  XOR2D0BWP U100 ( .A1(\add_64/carry [4]), .A2(SCLK), .Z(N35) );
  AO222D0BWP U101 ( .A1(cmd[14]), .A2(n86), .B1(rd_data[13]), .B2(n87), .C1(
        n88), .C2(rd_data[14]), .Z(n30) );
  AO222D0BWP U102 ( .A1(cmd[13]), .A2(n86), .B1(rd_data[12]), .B2(n87), .C1(
        rd_data[13]), .C2(n88), .Z(n31) );
  AO222D0BWP U103 ( .A1(cmd[12]), .A2(n86), .B1(rd_data[11]), .B2(n87), .C1(
        rd_data[12]), .C2(n88), .Z(n32) );
  AO222D0BWP U104 ( .A1(cmd[11]), .A2(n86), .B1(rd_data[10]), .B2(n87), .C1(
        rd_data[11]), .C2(n88), .Z(n33) );
  AO222D0BWP U105 ( .A1(cmd[10]), .A2(n86), .B1(rd_data[9]), .B2(n87), .C1(
        rd_data[10]), .C2(n88), .Z(n34) );
  AO222D0BWP U106 ( .A1(cmd[9]), .A2(n86), .B1(rd_data[8]), .B2(n87), .C1(
        rd_data[9]), .C2(n88), .Z(n35) );
  AO222D0BWP U107 ( .A1(cmd[8]), .A2(n86), .B1(rd_data[7]), .B2(n87), .C1(
        rd_data[8]), .C2(n88), .Z(n36) );
  AO222D0BWP U108 ( .A1(cmd[7]), .A2(n86), .B1(rd_data[6]), .B2(n87), .C1(
        rd_data[7]), .C2(n88), .Z(n37) );
  AO222D0BWP U109 ( .A1(cmd[6]), .A2(n86), .B1(rd_data[5]), .B2(n87), .C1(
        rd_data[6]), .C2(n88), .Z(n38) );
  AO222D0BWP U110 ( .A1(cmd[5]), .A2(n86), .B1(rd_data[4]), .B2(n87), .C1(
        rd_data[5]), .C2(n88), .Z(n39) );
  AO222D0BWP U111 ( .A1(cmd[4]), .A2(n86), .B1(rd_data[3]), .B2(n87), .C1(
        rd_data[4]), .C2(n88), .Z(n40) );
  AO222D0BWP U112 ( .A1(cmd[3]), .A2(n86), .B1(rd_data[2]), .B2(n87), .C1(
        rd_data[3]), .C2(n88), .Z(n41) );
  AO222D0BWP U113 ( .A1(cmd[2]), .A2(n86), .B1(rd_data[1]), .B2(n87), .C1(
        rd_data[2]), .C2(n88), .Z(n42) );
  AO222D0BWP U114 ( .A1(cmd[1]), .A2(n86), .B1(rd_data[0]), .B2(n87), .C1(
        rd_data[1]), .C2(n88), .Z(n43) );
  AO222D0BWP U115 ( .A1(cmd[15]), .A2(n86), .B1(rd_data[14]), .B2(n87), .C1(
        MOSI), .C2(n88), .Z(n29) );
  AO222D0BWP U116 ( .A1(cmd[0]), .A2(n86), .B1(MISO_smpl), .B2(n87), .C1(
        rd_data[0]), .C2(n88), .Z(n44) );
  ND3D1BWP U117 ( .A1(n98), .A2(n100), .A3(n86), .ZN(n17) );
  ND2D1BWP U118 ( .A1(n97), .A2(n17), .ZN(n23) );
  CKND0BWP U119 ( .I(n24), .ZN(n97) );
  AN2XD1BWP U120 ( .A1(n17), .A2(n19), .Z(n26) );
  CKBD3BWP U121 ( .I(n92), .Z(n91) );
  CKBD3BWP U122 ( .I(n92), .Z(n90) );
  INR3D0BWP U123 ( .A1(n18), .B1(n99), .B2(n14), .ZN(n22) );
  OAI221D0BWP U124 ( .A1(n98), .A2(n12), .B1(n99), .B2(n13), .C(n14), .ZN(
        next_state[1]) );
  CKND2D0BWP U125 ( .A1(n99), .A2(n100), .ZN(n12) );
  NR2XD0BWP U126 ( .A1(n97), .A2(n86), .ZN(n20) );
  CKBD4BWP U127 ( .I(n21), .Z(n88) );
  NR2XD0BWP U128 ( .A1(n86), .A2(n87), .ZN(n21) );
  IND2D1BWP U129 ( .A1(N33), .B1(n26), .ZN(N38) );
  IND2D1BWP U130 ( .A1(N32), .B1(n26), .ZN(N37) );
  AN2XD1BWP U131 ( .A1(N34), .A2(n26), .Z(N39) );
  INVD1BWP U132 ( .I(n86), .ZN(n95) );
  CKBD3BWP U133 ( .I(n93), .Z(n89) );
  CKBD1BWP U134 ( .I(n94), .Z(n93) );
  CKBD1BWP U135 ( .I(n94), .Z(n92) );
  IOA21D1BWP U136 ( .A1(done), .A2(n95), .B(n19), .ZN(n28) );
  OAI221D0BWP U137 ( .A1(n99), .A2(n98), .B1(n15), .B2(n16), .C(n17), .ZN(
        next_state[0]) );
  ND4D1BWP U138 ( .A1(n96), .A2(bit_cnt[3]), .A3(bit_cnt[2]), .A4(bit_cnt[1]), 
        .ZN(n16) );
  IND4D0BWP U139 ( .A1(SCLK), .B1(bit_cnt[0]), .B2(n18), .B3(n104), .ZN(n15)
         );
  INVD1BWP U140 ( .I(n14), .ZN(n96) );
  MOAI22D0BWP U141 ( .A1(n23), .A2(n104), .B1(N20), .B2(n24), .ZN(n45) );
  MOAI22D0BWP U142 ( .A1(n103), .A2(n23), .B1(N19), .B2(n24), .ZN(n46) );
  INVD1BWP U143 ( .I(bit_cnt[3]), .ZN(n103) );
  MOAI22D0BWP U144 ( .A1(n102), .A2(n23), .B1(N18), .B2(n24), .ZN(n47) );
  INVD1BWP U145 ( .I(bit_cnt[2]), .ZN(n102) );
  MOAI22D0BWP U146 ( .A1(N16), .A2(n23), .B1(N16), .B2(n24), .ZN(n48) );
  MOAI22D0BWP U147 ( .A1(n101), .A2(n23), .B1(N17), .B2(n24), .ZN(n49) );
  INVD1BWP U148 ( .I(bit_cnt[1]), .ZN(n101) );
  BUFFD6BWP U149 ( .I(wrt), .Z(n86) );
  IOA21D1BWP U150 ( .A1(SS_n), .A2(n95), .B(n19), .ZN(n27) );
  IND2D1BWP U151 ( .A1(N35), .B1(n26), .ZN(N40) );
  ND2D1BWP U152 ( .A1(sclk_div[0]), .A2(n26), .ZN(N36) );
  AN4D1BWP U153 ( .A1(sclk_div[3]), .A2(sclk_div[2]), .A3(sclk_div[1]), .A4(
        sclk_div[0]), .Z(n18) );
  ND2D1BWP U154 ( .A1(curr_state[0]), .A2(curr_state[1]), .ZN(n13) );
  INVD1BWP U155 ( .I(curr_state[1]), .ZN(n100) );
  INVD1BWP U156 ( .I(bit_cnt[4]), .ZN(n104) );
  HA1D0BWP U157 ( .A(bit_cnt[1]), .B(bit_cnt[0]), .CO(\add_52/carry [2]), .S(
        N17) );
  HA1D0BWP U158 ( .A(bit_cnt[2]), .B(\add_52/carry [2]), .CO(\add_52/carry [3]), .S(N18) );
  HA1D0BWP U159 ( .A(sclk_div[1]), .B(sclk_div[0]), .CO(\add_64/carry [2]), 
        .S(N32) );
  HA1D0BWP U160 ( .A(sclk_div[2]), .B(\add_64/carry [2]), .CO(
        \add_64/carry [3]), .S(N33) );
  HA1D0BWP U161 ( .A(bit_cnt[3]), .B(\add_52/carry [3]), .CO(\add_52/carry [4]), .S(N19) );
  HA1D0BWP U162 ( .A(sclk_div[3]), .B(\add_64/carry [3]), .CO(
        \add_64/carry [4]), .S(N34) );
  CKBD1BWP U163 ( .I(rst_n), .Z(n94) );
  CKBD16BWP U164 ( .I(MOSI), .Z(rd_data[15]) );
  CKND0BWP U165 ( .I(bit_cnt[0]), .ZN(N16) );
  CKXOR2D0BWP U166 ( .A1(\add_52/carry [4]), .A2(bit_cnt[4]), .Z(N20) );
endmodule

